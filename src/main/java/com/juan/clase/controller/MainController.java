package com.juan.clase.controller;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import com.juan.clase.bean.CalcularTrm;
import com.juan.clase.bean.Celular;
import com.juan.clase.bean.User;
import com.juan.clase.repository.CelularRepository;
import com.juan.clase.repository.UserRepository;

import input.Input;
import output.RespuesBd;
import output.RespuestaCalculadora;

@Controller // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;
	@Autowired
	private CelularRepository celularRepository;

	@PostMapping(path = "/add") // Map ONLY POST Requests
	public @ResponseBody RespuesBd addNewUser(@RequestParam String name, @RequestParam(required = false) String email,
			String apellido, Long cedula) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		RespuesBd respuesta = new RespuesBd();
		if (email == null) {
			respuesta.setRespuesta("Error en agregar email");
			respuesta.setError("se necesita el mail");
			return respuesta;
		}
		User n = new User();
		n.setName(name);
		try {
			n.setEmail(email);
		} catch (Exception e1) {
			respuesta.setRespuesta("Error en agregar email");
			respuesta.setError(e1.getMessage());
			e1.printStackTrace();
			return respuesta;

		}
		n.setApellido(apellido);
		n.setCedula(cedula);

		try {
			userRepository.save(n);

			respuesta.setError("usuario Salvado");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			respuesta.setRespuesta("Error en agregar usuario");
			respuesta.setError(e.getMessage());
		}
		return respuesta;

	}

	@PostMapping(value = "/addJson", consumes = { MediaType.APPLICATION_JSON_VALUE }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public @ResponseBody RespuesBd addNewUserJson(@RequestBody User user) {
		RespuesBd respuesta = new RespuesBd();
		Celular c1 = new Celular();
		if (user.getCelular() != null) {
			c1.setMarca(user.getCelular().getMarca());
			c1.setModelo(user.getCelular().getModelo());
			c1.setNumero(user.getCelular().getNumero());
			celularRepository.save(c1);
		}
		if (user.getEmail() == null) {
			respuesta.setRespuesta("Error en agregar email");
			respuesta.setError("se necesita el mail");
			return respuesta;
		}
		User n = new User();
		n.setName(user.getName());
		try {
			n.setEmail(user.getEmail());
		} catch (Exception e1) {
			respuesta.setRespuesta("Error en agregar email");
			respuesta.setError(e1.getMessage());
			e1.printStackTrace();
			return respuesta;

		}
		n.setApellido(user.getApellido());
		n.setCedula(user.getCedula());

		try {
			if (c1 != null) {
				n.setCelular(c1);
			}
			userRepository.save(n);

			respuesta.setError("usuario Salvado");
		} catch (Exception e) {
			// TODO Auto-generated catch block
			respuesta.setRespuesta("Error en agregar usuario");
			respuesta.setError(e.getMessage());
		}
		return respuesta;

	}

	@GetMapping(path = "/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	@GetMapping(value = "/consulta", consumes = { MediaType.APPLICATION_JSON_VALUE }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public @ResponseBody RespuestaCalculadora consultaUser(@RequestBody Input input) {

		Optional<User> user = userRepository.findById(input.getIdUser());
		RespuestaCalculadora r1 = new RespuestaCalculadora();
		if (user != null) {
			r1.setNombre(user.get().getName());
		}
		RestTemplate restTemplate = new RestTemplate();
		String url = "http://localhost:8080/" + input.getMetodo() + "/" + input.getNum();
		ResponseEntity<CalcularTrm> resCaluladora = restTemplate.exchange(url, HttpMethod.GET, null,
				new ParameterizedTypeReference<>() {
				});
		r1.setDolar(resCaluladora.getBody().getDolares());
		r1.setPesos(resCaluladora.getBody().getPessos());
		r1.setMetodo(url);
		r1.setTrm(resCaluladora.getBody().getTrm());
		r1.setResultado(resCaluladora.getBody().getTrm()+"");

		return r1;
	}

}